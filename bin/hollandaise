#!/usr/bin/env ruby

require 'thor'
require 'sauce'
require 'thread'
require 'builder'

module Hollandaise
  class << self
    attr_accessor :url, :browsers

    def configure
      yield self
    end
  end

  module Browsers
    class << self
      def for(browsers)
        browsers.collect { |browser| self.send(browser) }
      end

      def ie7
        [ :sauce, 'iexplore', '7', 'Windows 2003' ]
      end

      def ie8
        [ :sauce, 'iexplore', '8', 'Windows 2003' ]
      end

      def ie9
        [ :sauce, 'iexplore', '9', 'Windows 2008' ]
      end

      def ffwin10
        [ :sauce, 'firefox', '10', 'Windows 2008' ]
      end

      def chromewin
        [ :sauce, 'chrome', '', 'Windows 2008' ]
      end

      def firefox
        [ :selenium, :firefox ]
      end

      def chrome
        [ :selenium, :chrome ]
      end
    end
  end
end

begin
  load File.join(Dir.pwd, 'hollandaise.rb')
rescue LoadError => e
end

class Hollandaise::CLI < Thor
  desc "sauce URL BROWSER BROWSER...", "Take screenshots of a URL on Sauce Labs"
  method_options :delay => 0
  def sauce(*browsers)
    if browsers.first && browsers.first[%r{^http}]
      url = browsers.shift
    else
      url = Hollandaise.url
    end

    if Hollandaise.browsers && browsers.empty?
      browsers = Hollandaise.browsers
    end

    threads = []

    FileUtils.rm_rf(dir) if File.directory?(dir)
    FileUtils.mkdir_p(dir)

    mutex = Mutex.new

    Hollandaise::Browsers.for(browsers).each do |browser|
      info = { :browser_url => url, :job_name => "#{url}" }
      [ :type, :browser, :browser_version, :os ].each_with_index { |key, index| info[key] = browser[index] }

      thread = Thread.new do
        selenium = nil

        Thread.stop if Thread.current == self

        begin
          target = screenshot_target_for(Thread.current[:browser])
          FileUtils.mkdir_p(File.dirname(target))

          mutex.synchronize { puts "#{target}..." }

          selenium = case Thread.current[:browser].first
          when :sauce
            require 'sauce/selenium'

            Sauce::Selenium2.new(Thread.current[:info])
          when :selenium
            Selenium::WebDriver.for Thread.current[:browser].last
          end

          selenium.navigate.to url
          sleep options[:delay].to_i
          selenium.execute_script %{window.resizeTo(1280, 1024)}
          selenium.save_screenshot(target)

          mutex.synchronize { puts "#{target} done!" }
        ensure
          selenium.quit if selenium
        end
      end

      thread[:info] = info
      thread[:browser] = browser
      thread.run
      threads << thread
    end

    threads.each(&:join)

    html = Builder::XmlMarkup.new
    html.html {
      html.head {
        html.title { "Sauce Labs screenshots for #{url}" }
      }

      html.body {
        html.table {
          html.tr {
            browsers.each { |browser| html.th(browser) }
          }

          html.tr {
            Hollandaise::Browsers.for(browsers).each { |browser|
              html.td(:valign => 'top') {
                html.img(:src => screenshot_target_for(browser))
              }
            }
          }
        }
      }
    }

    File.open('index.html', 'wb') { |fh| fh.print html.to_s }
  end

  default_task :sauce

  no_tasks do
    def dir
      "screenshots"
    end

    def screenshot_target_for(browser)
      case browser.first
      when :sauce
        File.join(dir, browser[3], "#{browser[1]} #{browser[2]}.png")
      when :selenium
        File.join(dir, "#{browser[1]}.png")
      end
    end
  end
end

Hollandaise::CLI.start

